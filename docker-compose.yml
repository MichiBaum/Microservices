services:

  registry-service:
    image: 70131370/registry-service
    pull_policy: always
    env_file:
      - .env
    restart: always
    depends_on:
      - zipkin
    environment:
      spring_profiles_active: ${SPRING_ACTIVE_PROFILES}
      JAVA_TOOL_OPTIONS: ${JAVA_TOOL_OPTIONS}
    expose:
      - "8761"
    networks:
      - microservice-network
    healthcheck:
      test: "wget -T5 -qO- http://localhost:8761/actuator/health/readiness | grep UP || exit 1"
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 5

  admin-service:
    image: 70131370/admin-service
    pull_policy: always
    env_file:
      - .env
    restart: always
    depends_on:
      - registry-service
      - zipkin
    environment:
      spring_profiles_active: ${SPRING_ACTIVE_PROFILES}
      JAVA_TOOL_OPTIONS: ${JAVA_TOOL_OPTIONS}
    expose:
      - "80"
    networks:
      - microservice-network
    healthcheck:
      test: "wget -T5 -qO- http://localhost/actuator/health/readiness | grep UP || exit 1"
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 5

  authentication-service:
    image: 70131370/authentication-service
    pull_policy: always
    env_file:
      - .env
    restart: always
    depends_on:
      - registry-service
      - zipkin
    environment:
      spring_profiles_active: ${SPRING_ACTIVE_PROFILES}
      DATABASE_USERNAME: ${AUTHENTICATION_DB_USERNAME}
      DATABASE_PASSWORD: ${AUTHENTICATION_DB_PASSWORD}
      DATABASE: ${AUTHENTICATION_DB}
      JAVA_TOOL_OPTIONS: ${JAVA_TOOL_OPTIONS}
    expose:
      - "80"
    networks:
      - microservice-network
    healthcheck:
      test: "wget -T5 -qO- http://localhost/actuator/health/readiness | grep UP || exit 1"
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 5

  authentication-db:
    image: mariadb:10.11
    env_file:
      - .env
    restart: always
    environment:
      MARIADB_USER: ${AUTHENTICATION_DB_USERNAME}
      MARIADB_PASSWORD: ${AUTHENTICATION_DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${AUTHENTICATION_DB_ROOT_PASSWORD}
      MARIADB_DATABASE: ${AUTHENTICATION_DB}
    expose:
      - "3306"
    ports:
      - "127.0.0.1:3307:3306"
    volumes:
      - /data/authentication-db:/var/lib/mysql
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "healthcheck.sh", "--connect", "--innodb_initialized" ]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3

  usermanagement-service:
    image: 70131370/usermanagement-service
    pull_policy: always
    env_file:
      - .env
    restart: always
    depends_on:
      - registry-service
      - usermanagement-db
      - zipkin
    environment:
      spring_profiles_active: ${SPRING_ACTIVE_PROFILES}
      DATABASE_USERNAME: ${USERMANAGEMENT_DB_USERNAME}
      DATABASE_PASSWORD: ${USERMANAGEMENT_DB_PASSWORD}
      DATABASE: ${USERMANAGEMENT_DB}
      JAVA_TOOL_OPTIONS: ${JAVA_TOOL_OPTIONS}
    expose:
      - "80"
    networks:
      - microservice-network
    healthcheck:
      test: "wget -T5 -qO- http://localhost/actuator/health/readiness | grep UP || exit 1"
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 5

  usermanagement-db:
    image: mariadb:10.11
    env_file:
      - .env
    restart: always
    environment:
      MARIADB_USER: ${USERMANAGEMENT_DB_USERNAME}
      MARIADB_PASSWORD: ${USERMANAGEMENT_DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${USERMANAGEMENT_DB_ROOT_PASSWORD}
      MARIADB_DATABASE: ${USERMANAGEMENT_DB}
    expose:
      - "3306"
    ports:
      - "127.0.0.1:3308:3306"
    volumes:
      - /data/usermanagement-db:/var/lib/mysql
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "healthcheck.sh", "--connect", "--innodb_initialized" ]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3

  gateway-service:
    image: 70131370/gateway-service
    pull_policy: always
    env_file:
      - .env
    restart: always
    depends_on:
      - registry-service
      - zipkin
    environment:
      spring_profiles_active: ${SPRING_ACTIVE_PROFILES}
      JAVA_TOOL_OPTIONS: ${JAVA_TOOL_OPTIONS}
    ports:
      - "443:443"
    volumes:
      - /data/ssl:/data/ssl
    networks:
      - microservice-network
# Healthcheck disabled due to SSL certificate verification issues
# To enable, either:
# 1. Configure wget to skip certificate verification
# 2. Use a valid certificate for local healthchecks
# 3. Use an HTTP endpoint instead of HTTPS for healthchecks
#    healthcheck:
#      test: "wget --no-check-certificate -T5 -qO- https://localhost/actuator/health/readiness | grep UP || exit 1"
#      start_period: 5s
#      interval: 5s
#      timeout: 5s
#      retries: 5

  website-service:
    image: 70131370/website-service
    pull_policy: always
    env_file:
      - .env
    restart: always
    depends_on:
      - registry-service
      - zipkin
    environment:
      spring_profiles_active: ${SPRING_ACTIVE_PROFILES}
      JAVA_TOOL_OPTIONS: ${JAVA_TOOL_OPTIONS}
    expose:
      - "80"
    networks:
      - microservice-network
    healthcheck:
      test: "wget -T5 -qO- http://localhost/actuator/health/readiness | grep UP || exit 1"
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 5

  chess-service:
    image: 70131370/chess-service
    pull_policy: always
    env_file:
      - .env
    restart: always
    depends_on:
      - registry-service
      - chess-db
      - zipkin
    environment:
      spring_profiles_active: ${SPRING_ACTIVE_PROFILES}
      DATABASE_USERNAME: ${CHESS_DB_USERNAME}
      DATABASE_PASSWORD: ${CHESS_DB_PASSWORD}
      DATABASE: ${CHESS_DB}
      JAVA_TOOL_OPTIONS: ${JAVA_TOOL_OPTIONS}
    expose:
      - "80"
    networks:
      - microservice-network
    healthcheck:
      test: "wget -T5 -qO- http://localhost/actuator/health/readiness | grep UP || exit 1"
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 5

  chess-db:
    image: mariadb:10.11
    env_file:
      - .env
    restart: always
    environment:
      MARIADB_USER: ${CHESS_DB_USERNAME}
      MARIADB_PASSWORD: ${CHESS_DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${CHESS_DB_ROOT_PASSWORD}
      MARIADB_DATABASE: ${CHESS_DB}
      JAVA_TOOL_OPTIONS: ${JAVA_TOOL_OPTIONS}
    expose:
      - "3306"
    ports:
      - "127.0.0.1:3309:3306"
    volumes:
      - /data/chess-db:/var/lib/mysql
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "healthcheck.sh", "--connect", "--innodb_initialized" ]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3

  fitness-service:
    image: 70131370/fitness-service
    pull_policy: always
    env_file:
      - .env
    restart: always
    depends_on:
      - registry-service
      - fitness-db
      - zipkin
    environment:
      spring_profiles_active: ${SPRING_ACTIVE_PROFILES}
      DATABASE_USERNAME: ${FITNESS_DB_USERNAME}
      DATABASE_PASSWORD: ${FITNESS_DB_PASSWORD}
      DATABASE: ${FITNESS_DB}
      JAVA_TOOL_OPTIONS: ${JAVA_TOOL_OPTIONS}
    expose:
      - "80"
    networks:
      - microservice-network
    healthcheck:
      test: "wget -T5 -qO- http://localhost/actuator/health/readiness | grep UP || exit 1"
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 5

  fitness-db:
    image: mariadb:10.11
    env_file:
      - .env
    restart: always
    environment:
      MARIADB_USER: ${FITNESS_DB_USERNAME}
      MARIADB_PASSWORD: ${FITNESS_DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${FITNESS_DB_ROOT_PASSWORD}
      MARIADB_DATABASE: ${FITNESS_DB}
    expose:
      - "3306"
    ports:
      - "127.0.0.1:3310:3306"
    volumes:
      - /data/fitness-db:/var/lib/mysql
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "healthcheck.sh", "--connect", "--innodb_initialized" ]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3

  music-service:
    image: 70131370/music-service
    pull_policy: always
    env_file:
      - .env
    restart: always
    depends_on:
      - registry-service
      - music-db
      - zipkin
    environment:
      spring_profiles_active: ${SPRING_ACTIVE_PROFILES}
      DATABASE_USERNAME: ${MUSIC_DB_USERNAME}
      DATABASE_PASSWORD: ${MUSIC_DB_PASSWORD}
      DATABASE: ${MUSIC_DB}
      JAVA_TOOL_OPTIONS: ${JAVA_TOOL_OPTIONS}
    expose:
      - "80"
    networks:
      - microservice-network
    healthcheck:
      test: "wget -T5 -qO- http://localhost/actuator/health/readiness | grep UP || exit 1"
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 5

  music-db:
    image: mariadb:10.11
    env_file:
      - .env
    restart: always
    environment:
      MARIADB_USER: ${MUSIC_DB_USERNAME}
      MARIADB_PASSWORD: ${MUSIC_DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${MUSIC_DB_ROOT_PASSWORD}
      MARIADB_DATABASE: ${MUSIC_DB}
    expose:
      - "3306"
    ports:
      - "127.0.0.1:3311:3306"
    volumes:
      - /data/music-db:/var/lib/mysql
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "healthcheck.sh", "--connect", "--innodb_initialized" ]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3

  zipkin-storage:
    image: ghcr.io/openzipkin/zipkin-elasticsearch8:3.5
    restart: always
    expose:
      - "9200"
    volumes:
      - /data/zipkin-storage:/usr/share/elasticsearch/data
    networks:
      - microservice-network

  zipkin:
    image: ghcr.io/openzipkin/zipkin:3.5
    restart: always
    depends_on:
      - zipkin-storage
    environment:
      STORAGE_TYPE: elasticsearch
      ES_HOSTS: zipkin-storage:9200
    expose:
      - "9411"
    networks:
      - microservice-network

  zipkin-dependencies:
    image: ghcr.io/openzipkin/zipkin-dependencies:3.2
    restart: always
    depends_on:
      - zipkin-storage
    user: root
    entrypoint: /usr/sbin/crond -f
    environment:
      STORAGE_TYPE: elasticsearch
      ES_HOSTS: zipkin-storage:9200
    networks:
      - microservice-network

  prometheus:
    build:
      context: prometheus
      dockerfile: Dockerfile
    restart: always
    environment:
      PROMETHEUS_EUREKA_URL: ${PROMETHEUS_EUREKA_URL}
      PROMETHEUS_EUREKA_USERNAME: ${ADMIN_SERVICE_USERNAME}
      PROMETHEUS_EUREKA_PASSWORD: ${ADMIN_SERVICE_PASSWORD}
    expose:
      - "9090"
    networks:
      - microservice-network

  grafana:
    image: grafana/grafana
    restart: always
    env_file:
      - .env
    expose:
      - "3000"
    volumes:
      - ./grafana:/etc/grafana/provisioning
    networks:
      - microservice-network

networks:
  microservice-network:
    name: microservice-network
    driver: bridge
