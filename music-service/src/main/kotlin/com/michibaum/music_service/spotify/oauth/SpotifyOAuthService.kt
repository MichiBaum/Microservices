package com.michibaum.music_service.spotify.oauth

import com.michibaum.authentication_library.security.jwt.JwtAuthentication
import org.springframework.stereotype.Service
import java.security.SecureRandom
import java.time.Instant
import java.util.*

@Service
class SpotifyOAuthService(
    private val spotifyOAuthDataRepository: SpotifyOAuthDataRepository,
    private val spotifyOAuthCredentialsRepository: SpotifyOAuthCredentialsRepository,
) {

    fun generateData(principal: JwtAuthentication): SpotifyOAuthData {
        // State | A unique value generated by the app which will be passed back to and validated by the app.
        val state = generateState()

        val spotifyOAuthData = SpotifyOAuthData(
            state = state,
            userId = principal.getUserId()
        )
        return spotifyOAuthDataRepository.save(spotifyOAuthData)
    }

    /**
     * Generates a cryptographically secure random state value used in the OAuth flow.
     *
     * The generated state is a URL-safe, base64-encoded string without padding.
     *
     * @return A unique state value as a URL-safe, base64-encoded string.
     */
    private fun generateState(): String {
        val secureRandom = SecureRandom()
        val state = ByteArray(16)
        secureRandom.nextBytes(state)
        return Base64.getUrlEncoder().withoutPadding().encodeToString(state)
    }

    fun findByState(state: String): SpotifyOAuthData? =
        spotifyOAuthDataRepository.findByState(state)

    fun save(response: SpotifyOAuthCredentialsDto, oAuthData: SpotifyOAuthData): SpotifyOAuthCredentials {
        val credentials = SpotifyOAuthCredentials(
            accessToken = response.accessToken,
            expiresIn = response.expiresIn.toInt(),
            refreshToken = response.refreshToken,
            scope = response.scope,
            userId = oAuthData.userId,
            createdDate = Instant.now(),
            validUntil = Instant.now().plusSeconds(response.expiresIn.toLong()),
        )

        return spotifyOAuthCredentialsRepository.save(credentials)
    }

}